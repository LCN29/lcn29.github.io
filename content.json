{"meta":{"title":"lcn的博客","subtitle":"学无止境","description":"好记性不如烂笔头","author":"lcn","url":"http://lcn29.github.io","root":"/"},"pages":[{"title":"404 Not Found","text":"","path":"/404.html","date":"07-12","excerpt":""},{"title":"关于我","text":"","path":"about/index.html","date":"07-13","excerpt":""},{"title":"文章分类","text":"","path":"categories/index.html","date":"07-13","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"07-12","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"07-13","excerpt":""}],"posts":[{"title":"Github免密提交","text":"GitHub免密提交通过git bash提交代码到github时，如果没有设置的话，每次都需要输入用户名和密码，很麻烦对吧。但是可以通过设置省去每次提交时输入用户名和密码的过程。1. 基于Https1.进入到你的C:/Users/{你的电脑的用户名}2.查看是否有一个.gitconfig文件(1)如果有,打开文件, 查看里面的用户名和邮箱是不是你github的信息，不是,需要进行修改(2)如果没有, 依次输入 git config --global user.email &quot;你注册GitHub用的邮箱&quot; 和 git config --global user.name &quot;你GitHub的用户名&quot;, 如果正常的话，会在本地生成一个对应的.gitconfig文件, 文件里面是你刚刚输入过的用户名好邮箱3.在本地新建一个.git-credentials文件, 文件里面的内容为https:{GitHub的用户名}:{GitHub的登录密码}@github.com4.执行命令git config --global credential.helper store, 这是你的.gitconfig的内容应该是这样的5.这时你进行提交时，还是会要你输入一串用户名好密码，输入后，后续的提交都可以免密提交了2. 基于SSH同https方式的第一步同https方式的第二步查看本地有没有一个.ssh的文件夹，如果有,里面的文件有文件名为id_rsa和id_rsa.pub的请先进行处理，因为后续生成的用于登录github的密钥的名字冲突了(当然，你也可以直接使用这已有的公钥和密钥，前提是对你没有影响)输入要命令 ssh-keygen -t rsa -C 你注册GitHub用的邮箱,期间的三次询问，默认回车就行了，最后你会发现你的本地生成了一个.ssh的文件夹，里面有2个文件id_rsa和id_rsa.pub登录你的github,(1) 在首页点击你头像, 在下来的选项中点击Settings,(2) 在左侧的侧边栏，选择SSH and GPG keys,(3) 在右侧中, 选择 New SSH key(4) 打开你本地.ssh文件夹里面的id_rsa.pub,复制里面的全部内容(5) 回到Github刚刚打开的页面，在里面的title栏，输入一个可以让你知道这个公钥的作用的提示就行了，然后把你复制的内容黏贴到下面的key栏，点击Add SSH Key就行了。这样只要你后续不删除.ssh里面的内容，你就可以一直免密提交东西到github了。3. 备注因为我的系统是window的，所以上面的2种方式都是cd 到了 C:/Users/{你的电脑的用户名}, 如果是Mac,应该是/Users/username2种方式要实现免密提交的大前提还有：你的仓库是使用对应的方式克隆下来的。如果你的仓库是通过https克隆下面的，那么ssh的免密提交是不起作用的，同理,ssh克隆下来的,https的方式不起作用","path":"2019/08/04/Github免密提交/","date":"08-04","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]},{"title":"Git提交撤销","text":"Git提交撤销把自己修改后的代码提交到远程的主干,通常需要经过 本地工作目录 -&gt; 暂存区 -&gt; 本地分支 -&gt; 远程分支。 其中第一个箭头就是git add,第二个表示git commit, 第三个箭头表示git push。我们需要经过这3步才能将我们做的修改发布到远程的分支。这三步如果有哪一步提交了，但是你又想撤销了，都可以通过对应的命令进行撤销git add的撤销(1) 需要撤销全部1git reset HEAD(2) 只需要撤销某个文件1git reset HEAD 你想要撤销的文件git commit的撤销(1) 因为提交的备注错了,只需要修改备注12# 执行下面的命令,会进入到vim模式，可以执行对你的备注进行修改git commit --amend(2) 不删除工作空间改动代码, 撤销 commit, 同时撤销add123git reset HEAD^# 下面的效果和上面的一样git reset --mixed HEAD^(3) 不删除工作空间改动代码, 撤销 commit, 但是不撤销add1git reset --soft HEAD^(4) 删除工作空间改动代码(回到上次commit的样子)，撤销commit，撤销add1git reset --hard HEAD^[注]上面的HEAD^ 可以替代成HEAD~1,在 Git的1.8.5版本之后，HEAD有一个缩写形式@,既上面所有的HEAD都可以替换为@git push的撤销情景： 现在有一个文件a,第一次在a里面写入1, push成功了,第二次在a里面写入2, push也成功了,第三次在a里面写入3, push成功了,现在a的内容为’1,2,3’。通过 git reset 进行撤销(1) 如果你现在只是想撤回3的提交,那么你可以直接1234567891011# 通过 git long 查找到2的提交id, 下面的命令可以加上参数 --oneline 减少一些没有的信息git log# 查找到了，通过q退出查找q# 回滚git reset 2的commitId# 强制提交到远程分支git push origin 分支名 --force(2)如果想要撤回3,2的提交(同时撤销多个提交)123456789101112git logq# 回到 1处git reset 1的commitId# 把head重新移到最新的commitId, 这是你的内容还是1的内容, 没有这一步，后续的提交会报错git reset 远程分支最新的commitId# 提交git push[注]reset 的三个参数(hard,soft,mixed)，根据自身的需要进行选择添加通过 git revert 进行撤销(1) 如果你现在只是想撤回3的提交,那么你可以直接123456git logq# 此次的commitId为你想要撤销的Id，而不是下一个的commitIdgit revert 3处的commitIdgit push(2)如果想要撤回3,2的提交(同时撤销多个提交)1234git logqgit revert 3处的commitId 2处的commitIdgit push[注]revert运行跨commit进行回滚的，前提的是你想要回滚的commit涉及的文件，在后面都没有被修改过revert和reset的区别revert是提交一个新的commit来回滚的, commit的内容就是和已想要回滚的那个commit相反的操作reset 是直接删除指定的commit, 后续的commit记录是看不到的上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的建议：用git revert来撤销已经提交的更改，而git reset用来撤销没有提交的更改参考：git push之后回滚(撤销)代码","path":"2019/08/04/Git提交撤销/","date":"08-04","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]},{"title":"Git提交","text":"Git提交1. 代码提交平时如果使用Github，没有按照客户端的话,或者借助开发工具(eclipse, idea等自带的插件),我们都是通过Git的控制台进行操作的，如果要提交代码的话, 我们需要依次1234# 添加当前路径和路径下面的所有修改过的文件git add .git commit -m '提交的备注'git push我们可以通配置github免密提交，然后把上面的三个命令封装为一个shell脚本(也可以封装成window的cmd，可俺不会)，后续直接执行一次这个脚本,就能提交修改了1git add . &amp;&amp; git commit -m $1 &amp;&amp; git push新建一个push.sh文件，然后把上面的内容复制到文件内,然后把文件放到你的仓库的根目录,后续修改了代码，需要提交时只有打开git的bash 输入 sh push.sh &#39;提交的备注&#39;就行了缺点：每次提交都是全部内容提交，没法做出筛选(可以修改一下脚本, 增加一个参数：提交的目录文件)2. 将本地已有的代码提交到一个新的仓库如果你本地已有一部分写好的代码，现在想要用Github进行版本管理等，又不想改变本地的工作空间，那么你可以在Github上新建一个仓库，仓库名和你本地代码的工作空间的名称一样,(如，你的代码在D/code/project/Test, test下面就是你想要提交到Github的内容,那么你的仓库名就是Test)然后在你代码的根目录(也就是Test里面) 执行 git initgit remote add origin 你的仓库地址 把你本地和远程的git仓库绑定git pull 拉取远程仓库的内容git add . 把本地代码提交到git的缓存区 (如果有文件不想要提交的，提前建立好.gitignore文件进行过滤)git commit -m &#39;提交备注&#39;git push -u origin 你想要提交到的分支(master) 提交到远程仓库","path":"2019/08/04/Git提交/","date":"08-04","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]},{"title":"GitHubPages介绍","text":"GitHub Pages介绍12Websites for you and your projects.Hosted directly from your GitHub repository. Just edit, push, and your changes are live.我的理解：一个依托于Github仓库的展示你或者你的项目的静态网站。当你的网站做了修改，只有将其托送到对应的Github仓库,那么你的修改就能立即生效。2. 展示你基于GitHub Pages建立一个属于你自己的网站的步骤:(1)第一步建立一个仓库在Github上建立一个仓库，这个仓库和平时你存项目的仓库没有什么区别，唯一的要求就是仓库的名字的格式： {你的Github用户名}.github.io 这个格式是保证后续能够访问到你的仓库内容要求(2)在你的仓库里面新建一个index.html页面(index.html就是你的网站的入口)&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt; &lt;title&gt;Examples&lt;/title&gt; &lt;meta name=\"description\" content=\"\"&gt; &lt;meta name=\"keywords\" content=\"\"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello GitHub Pages !&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;通过上面2步上面，一个展示你的网站就完成了。这是你通过浏览器访问https://{你的Github用户名}.github.io你将看到你index里面的内容了: Hello GitHub Pages。后续你只要修改index.html页面或者添加新的页面，在提交到你的仓库，那么对应的页面就会修改。所以你完全可以通过GitPage做一个你想要的网站[注] 如果你拥有一个组织，也想建立一个展示你组织的网站,方式和上面类似，只是{你的Github用户名}修改为{你的组织的名}3. 展示你项目假设你把你的一个项目托管到了github,并将其开源了。那么为了让别人能开心的使用你的开源项目，当前需要有对应的说明文档吧。这是你会?直接写在readme开一个wiki这2种方式都可以。 现在你可以多一种方式了：为你的项目建一个GitHub Pages,通过网页的形式进行介绍第一步在你的开源项目下新建一个分支 (分支名：gh-pages)在你的分支里面放入你想要展示的页面(如果你的项目的master里面原本是有内容的，切的分支里面也会有对应的内容,因为这条分支后续是不会合并内容到主干的，所以可考虑把这些内容删除,方便后续的管理)这时你就可以通过 https://{你的用户名}.github.io/{你的项目仓库名(大小写要一致)}访问到你的项目了GitHub Pages了4. 注意事项GitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它5. 使用限制GitHub Pages源库建议限制在1GB内发布的GitHub Pages网站体积最大不能超过1GB,(还有每个月限制100000的访问量,但是从官网来看的话，这个限制应该是没有了)GitHub Page网站带宽限制是100GbGitHub Pages页面网站每小时最多有10次构建如果你超过了这些使用配额，Github官方将不会提供给你的网站提供服务，或者你可能会受到一个有礼貌的邮件，它是来自GitHub Support的建议策略，目的是降低你的网站对GitHub服务器的影响。建议其中包括迁移到一个不同的主机服务以便更加满足你的需求。6.禁止事项GitHub的服务条款禁止的或非法的内容或活动暴力或威胁性的内容或活动过多的自动化批量活动(例如，垃圾邮件)危害github用户或github服务的活动快速致富计划,也就是赌博等活动色情内容歪曲你的身份或网站目的的内容","path":"2019/08/01/GitHubPages介绍/","date":"08-01","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]}]}