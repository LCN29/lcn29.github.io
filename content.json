{"meta":{"title":"lcn的博客","subtitle":"学无止境","description":"好记性不如烂笔头","author":"lcn","url":"http://lcn29.github.io","root":"/"},"pages":[{"title":"404 Not Found","text":"","path":"/404.html","date":"07-12","excerpt":""},{"title":"关于我","text":"","path":"about/index.html","date":"07-13","excerpt":""},{"title":"文章分类","text":"","path":"categories/index.html","date":"07-13","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"07-12","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"07-13","excerpt":""}],"posts":[{"title":"快速搭建一个自己的博客","text":"快速搭建一个自己的博客做一个自己的博客网站，基本可以从很多方面入手。从购买服务器到自己编写页面，从dns到页面优化。投入的越多,理所当然的你的网站体验就越好等。但是考虑到时间,价钱等原因，我们可以站在前人的基础上，选择最合适方式搭建自己的网站, 达到快速的搭建。技术选择GitHub + Hexo + Markdown (推荐)GitHub + Jekyll + Markdown自选服务器 + Wordpress + 插件…从免费的角度出发的话,很多人都会选择前2种吧。 而hexo是需要node环境,jekeyll需要ruby，同时hexo有现成的中文文档，所以在搭建本站是采用了Hexo,环境搭建简单的同时还有中文文档。那么开始吧,我们的博客搭建之路环境搭建1.因为用到了Github，所以需要你本地有git的环境window 可以到Git的官网下载一个GitBash，一路默认配置安装就行了。node环境安装到node的官网下载一个node，双击安装就行了。2.安装hexo打开你的cmd,执行一下1234npm install -g hexo-cli# 安装完,执行下面的命令, 可以打印出hexo-cli 的版本号,就是安装完成了hexo -v3.初始你的博客工作空间12# 新版本的hexo,在你初始的过程中,会把你项目的依赖都下来了, 也就是npm install 可以不应执行了hexo init 你的工作空间的名字4.启动你的项目12345678# 进入到你的工作空间cd /你的工作空间的名字# 打包，生成网站的文件hexo g # 启动项目hexo s这时打开你的浏览器,访问 http://localhost:4000就能看到你的网站了,如果想要停止的话, 在你的命令窗口输入ctrl+C就行了,自此你的环境就搭建成功了。如果你有将东西备份在GitHub的习惯的话，或者利用Github来做版本管理等,这时候可以把你的项目放到Github上了,步骤可以参考这里主题更换hexo初始的主题是不是有点丑呢?这时候，如果你是一个前端大佬，想要从0 开始，自定义想要的页面样子的话，可以参考官网的文档进行开发了. 如果你和我一样，对自己的审美,适配等原因而无奈的话，我们可以套用别人分享的主题。1.主题寻找首先进入hexo主题,你可以看到有很多别人分享的主题,从中选择一款你喜欢的, 本站使用的主题是这个：gal, 感谢作者的分享。说明一下，网上找的的资料，大部分的人都是以Next为例子, 文档挺全的,同时next主题也有很多人进行2次开发,样子也都挺好看的，所以如果你没有什么要求，可以尝试使用next, 后面的配置,改造有很多巨人肩膀可以给你依靠。2.导入主题找到了自己想要的主题后, 可以点击一下主题的标题，正常情况下是可以进入到作者分享的主题的github仓库。仓库的克隆地址。打开你本地项目的目录, 进入到你的themes目录,然后把刚刚的主题仓库克隆下来,把文件夹的名字复制下来回到你项目的根目录, 打开_config.yml, 有的主题在他们仓库的readme,有教你们如何配置,很多都是会把他们仓库名和主题名弄混淆,比如: hexo-theme-A-RSnippet ,文档说的配置是a-rsnippet,之所以能起作用,是他们在克隆仓库时,指定了本地的文件夹名,但是这一步很多文档是没有说的，所以很容易出现你的themes下的主题是hexo-theme-A-RSnippet, 但是你的配置是a-rsnippet，所以主题不起作用.12# 把theme修改为你的第二步复制下来的文件夹名, theme: 文件夹名(themes下一定要有和它对应的名字一模一样的主题存在)安装你想要的主题的配置文档进行其他相对应的配置。比如我使用的gal主题,需要先安装hexo-renderer-sass和hexo-renderer-scss, 才能将主题里面的scss文件编译成css文件启动项目, 这时你的的主题已经起作用了(下面的就是启动命令,后续的重启服务基本都是需要走一遍这个流程)123456# clean 清除上一次生成的文件 hexo clean # 重新生成新的文件hexo g # 启动你的服务hexo s这时,如果你想把可以代码提交到Github时,会报错You&#39;ve added another git repository inside your current repository. 大概的意思是你仓库里面有另一个仓库(你的主题仓库)。解决：进入到themes/你下载的主题/里面, 删除里面的.git文件，在回到你的项目的跟目录 git rm --cached -f themes/你下载的主题/,后面你就能提交了定制化你的博客这个基本可以通过查看对应主题的文档进行改造，比如添加归档,404页面等,根据自己的需要和对应主题的文档进行修改就行了。新建你的文章开始你的书写博客之路了1hexo new 文章的名字这时在 你的项目的根目录/source/_posts 下面有一个 你命名的文章的名字.md的文件。打开,你就可以通过markdown写下你的内容了(注头部的内容不能删除), 重新走一遍从重启服务, 这是你就能看到你写的文章了。发布你的博客利用Github Pages功能,部署到服务器, 方便别人可查看, 不了解GitHub Pages的可以先看一下这里(1) 先建立一个仓库名为{你的GitHub的用户名}.github.io的仓库,然后把它克隆到你本地,(2) 把博客项目里的public目录内的所有的文件复制到刚克隆下来的仓库里,然后提交到GitHub上(3) 这是通过浏览器访问https://{你的GitHub的用户名}.github.io就能访问到你的网站了到此你网站就算是完成了,但是这是最简单的一个静态网站，只具备了看的功能，我们来为我们的网站增加功能吧自动发布代码到你仓库每次你修改了文章等,如果都要重复上面的步骤(1)(2),是一个麻烦的过程,而Hexo为我们提供了一个插件,用于省略发布的过程(Hexo还提供了很多插件，有兴趣的可以到官网了解一下)(1)配置你本地能够免密(SSH方式)提交代码到Github, 配置的过程可以查看这里(2)安装自动发布插件 npm install hexo-deployer-git --save(3)在根目录的_config.xml文件添加1234deploy: type: git repo: git: 你GitHub Pages仓库的地址,注意此次需要为ssh的地址,如果是https的是不能上传的(4)后续你要把你的页面发布到对应的仓库时,只需要通过下面的命令就能发布到对应的仓库了1hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy添加评论功能(1) 首先需要你的主题支持评论(现在大多数的主题都支持的,但是不排除没有的是不)(2)评论插件选取Hypercomments来必力GitmentGittalk…因为用的主题gal，用到是Gitment(为了可以自定义评论区的样式)，所以此次以Gitment作为例子(Gitment的作者已经一年多没维护这个项目了,所以可以的话，试着换另一个插件),其他的插件，根据对应的文档进行配置就行了。(3)到GitHub的这里注册一个oAuth(Gitment是利用Github的issure作为评论存储的)。地址在这里如图：里面的Homepage URL 和 Authorization callback如果你的项目是基于GitPages并且没有绑定自己的域名的话，按照上面的配置就可以了,如果你基于GitPages但是又绑定了自己的域名,则填自己的域名就行了,其他的搭建在自己的服务器的,则填自己服务器的对应的首页。注册成功后，你将会得到一个Client ID和Client Secret。(4)按照你的主题的设置,开启对应的设置,然后把client id 和 client secret 配置进你的文件就行了。如下，是gal主题的配置这样你的系统就具备了评论的前提了。(5)当你的文章开启了评论功能后，你打开页面, 登录后, 你会发现你的文章下有个要你初始评论的按钮，只有你点了初始，才能进行评论。这是因为Gitment是基于GitHub的issues功能的，如果要能发issues，需要有人先开启一个issure，所以你的初始按钮就是起到初始的功能不同主题的这个初始样式是不一样的哦,此处为gal主题的样式,也有可能你的主题是没有这个的脚本自动化评论如果你一次添加了很多文章，那么后续发布后, 你需要手动的登录你的网站，然后一个个的给他们初始化评论, 对自己不太好吧。我们可以通过脚本的形式每次给没有初始化过的文章自动初始。(1)首先你需要一个access token允许你通过api的方式操作你的仓库。Access token的申请，可以点这里, 点击右上角的Generate new token, 输入你的登录密码后，就能看到下面的 只需要把repo的勾上，点击Generate Token就行了。这时你会得到一串秘钥。保存起来,同时不要泄露了,如果其他人得到了这个秘钥，那么就可以通过api的方式操作你的仓库了。(2)安装可以生成网站生成站点图的插件(站点图：就是一个包含你网站所有的网页的文件,便于搜索引擎抓取你的网站)12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save(3)在你的项目的的配置文件里面加上123456# 网站站点图sitemap: path: sitemap/sitemap.xml # 百度站点图baidusitemap: path: sitemap/baidusitemap.xml有了这个配置那么后续你的打包，都会在public目录下面生成一个sitemap目录,目录里面有2个上面配置的文件,这2个文件都是用于搜索引擎抓取你的网站用的, 只是一个是专门给百度用，一个是通用的(4) 新建一个自己初始脚本脚本的内容在 这里。(里面的配置的Token已经失效了, Github在你把代码提交的时候，检测到里面有对应的Token，就会将你的token失效掉，所以当你的代码提交到Github时为了不让token失效，需要先把他删除了,再提交) 放到你的项目的根目录，这个脚本需要你根据自己的主题进行修改，里面最重要的是这个(5) token的管理因为GitHub不允许在脚本里面出现token，但是如果token不好保存，这个还会限制到你的异地开发。可以利用Travis管理你的仓库，同时管理你的token。因为这个东西, 我还在摸索中，就不介绍了添加统计有了统计功能能够帮你更清晰的认清你的网站的情况,而我们的网站是一个静态的网站,想要拥有统计的功能,就需要借助第三方的服务了。现在第三方的插件已知的有2种:leancloud和不蒜子。但是使用这2个需要你的主题支持(不支持的话，当然你也可以对页面进行修改的), 在我这边的使用中：leancloud用于在文章的访问量统计,不蒜子用于网站的访问量的统计。(1)不蒜子的使用：这里。使用很简单,在你的项目的根目录 themes/你的主题/layout/_partial/head.ejs/swing 引入想要的js文件,然后在 themes/你的主题/layout/_partial/footer.ejs/swing引入对应的统计标签就行了(2) leancloud: 使用leancloud需要实名认证，所以我的博客没有使用(在gal主题, 不使用leancloud,那么首页的文章的阅读量就无法获取了,受到了影响就这个,进入到每篇文章的的页面，文章的阅读量还是可以通过不蒜子实现的),但是Leancloud是Hexo推荐的统计插件,还是可以试着使用一下的。使用的话，可以参考这里添加live-2d(也就是页面左下角的小人了)(1) 安装对应的插件 npm install --save hexo-helper-live2d(2) 然后到这里可以找到部分live-2d模型的预览，挑选一个自己喜欢的，复制下名字(3) 安装对应的模型npm install --save npm install live2d-widget-model-模型的名称(4) 在你项目的根目录新建一个文件夹live2d_models,然后到node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中(5) 配置123456789101112131415161718live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-模型的名称 display: position: left/right width: 150 (live-2d 的显示宽) height: 400 (live-2d 的显示高) mobile: show: false react: opacity: 0.9点击心形效果(1)引入脚本，放到项目的根目录/themes/你下载的主题/source/js/(2)打开 项目的根目录/themes/你下载的主题/source/layout/_partial/head.ejs/swing 引入这个jsRss功能一个类似于订阅的功能,用户点击了rss,就相当于订阅了你，你后续发布了新的文章，订阅的用户就可以知道。(gal主题不支持这个,但是我这个做了一点小修改, 将其放到了个人的链接里面了)(1) 安装插件 npm install --save hexo-generator-feed(2) 配置(这时候你的RSS链接就是 域名/atom.xml)12345678# Rss配置plugins: hexo-generator-feedfeed: type: atom path: atom.xml # 0 全部, atom.xml每次生成容纳多少文章 limit: 20(3)现在你的网站已经支持Rss功能了, 但是用户的使用需要RSS阅读器,rss阅读器的选择可以看这个,我使用的是InoReader,因为是国外的,所以速度有点慢。静态文件压缩现在已知的压缩方式有2种: gulp和hexo-neat。 gulp我试过2次，都报错了, 放弃了。 这里介绍一下hexo-neat。(1)安装插件 npm install --save hexo-neat(2)配置12345678910111213141516171819neat_enable: true# 压缩htmlneat_html: enable: true exclude: # 压缩css neat_css: enable: true exclude: - '**/*.min.css'# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - '**/*.min.js' - '**/clicklove.js'通过这个插件可以对html, css, js进行压缩，但是在压缩js是会报错,可以把上面压缩js的开关关掉就行了。关联域名本身没有绑定域名，所以没设置,可以参考这个设置coding,让百度收录hexo托管在github了，但是github是国外的，百度的爬虫是不能够爬取github的。如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管,Coding可以看做是国内版的GitHub,大体的操作和GitHub差不多。(1) 到coding注册一个个人账号，记住不是组织账号，现在coding应该被腾讯云整合之类的，所以只能通过qq,微信进行注册了。(2) 在coding建立一个 {你的coding名}.coding.me的仓库,同时开启Pages功能(3) 配置免密登录,可以使用和github一样的公钥(4) 配置一下你的_config.yml文件, 后续你发包后，内容都会在GitHub和Coding同时发布123456# 部署部分设置deploy: type: git repo: coding: git@git.dev.tencent.com:coding用户名/用户名.coding.me.git git: git@github.com:用户名/用户名.github.io.git这时你能想访问GitHub Pages 一样访问你在coding上的页面了, 格式 https://{你的coding名}.coding.me最后自此, 利用hexo搭建自己的博客的过程就玩了, 上面的流程可以根据自己的需要进行选择,同时也可以增加, 比如引入音乐功能(我的博客就增加了)等其他功能，可以根据自己的需要进行取舍。 同时如开头说的，现在你博客网站的优化是无上限的。(1)比如我们可以把我们的网站的大量图片放到图床上优化网站的加载速度，或者为了保证质量，也可以通过购买其他的服务商的对象存储 OSS做自己的图床(2)在你的网站前面，设置多一次cdn(3)自购服务器, 配合nginx,tomcat等,让网站运行在你自己的服务器上最后,祝各位搭建出自己满意的博客网站","path":"2019/08/04/快速搭建一个自己的博客/","date":"08-04","excerpt":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://lcn29.github.io/tags/Hexo/"}]},{"title":"Github免密提交","text":"GitHub免密提交通过git bash提交代码到github时，如果没有设置的话，每次都需要输入用户名和密码，很麻烦对吧。但是可以通过设置省去每次提交时输入用户名和密码的过程。1. 基于Https1.进入到你的C:/Users/{你的电脑的用户名}2.查看是否有一个.gitconfig文件(1)如果有,打开文件, 查看里面的用户名和邮箱是不是你github的信息，不是,需要进行修改(2)如果没有, 依次输入 git config --global user.email &quot;你注册GitHub用的邮箱&quot; 和 git config --global user.name &quot;你GitHub的用户名&quot;, 如果正常的话，会在本地生成一个对应的.gitconfig文件, 文件里面是你刚刚输入过的用户名好邮箱3.在本地新建一个.git-credentials文件, 文件里面的内容为https:{GitHub的用户名}:{GitHub的登录密码}@github.com4.执行命令git config --global credential.helper store, 这是你的.gitconfig的内容应该是这样的5.这时你进行提交时，还是会要你输入一串用户名好密码，输入后，后续的提交都可以免密提交了2. 基于SSH同https方式的第一步同https方式的第二步查看本地有没有一个.ssh的文件夹，如果有,里面的文件有文件名为id_rsa和id_rsa.pub的请先进行处理，因为后续生成的用于登录github的密钥的名字冲突了(当然，你也可以直接使用这已有的公钥和密钥，前提是对你没有影响)输入要命令 ssh-keygen -t rsa -C 你注册GitHub用的邮箱,期间的三次询问，默认回车就行了，最后你会发现你的本地生成了一个.ssh的文件夹，里面有2个文件id_rsa和id_rsa.pub登录你的github,(1) 在首页点击你头像, 在下来的选项中点击Settings,(2) 在左侧的侧边栏，选择SSH and GPG keys,(3) 在右侧中, 选择 New SSH key(4) 打开你本地.ssh文件夹里面的id_rsa.pub,复制里面的全部内容(5) 回到Github刚刚打开的页面，在里面的title栏，输入一个可以让你知道这个公钥的作用的提示就行了，然后把你复制的内容黏贴到下面的key栏，点击Add SSH Key就行了。这样只要你后续不删除.ssh里面的内容，你就可以一直免密提交东西到github了。3. 备注因为我的系统是window的，所以上面的2种方式都是cd 到了 C:/Users/{你的电脑的用户名}, 如果是Mac,应该是/Users/username2种方式要实现免密提交的大前提还有：你的仓库是使用对应的方式克隆下来的。如果你的仓库是通过https克隆下面的，那么ssh的免密提交是不起作用的，同理,ssh克隆下来的,https的方式不起作用","path":"2019/08/04/Github免密提交/","date":"08-04","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]},{"title":"Git提交撤销","text":"Git提交撤销把自己修改后的代码提交到远程的主干,通常需要经过 本地工作目录 -&gt; 暂存区 -&gt; 本地分支 -&gt; 远程分支。 其中第一个箭头就是git add,第二个表示git commit, 第三个箭头表示git push。我们需要经过这3步才能将我们做的修改发布到远程的分支。这三步如果有哪一步提交了，但是你又想撤销了，都可以通过对应的命令进行撤销git add的撤销(1) 需要撤销全部1git reset HEAD(2) 只需要撤销某个文件1git reset HEAD 你想要撤销的文件git commit的撤销(1) 因为提交的备注错了,只需要修改备注12# 执行下面的命令,会进入到vim模式，可以执行对你的备注进行修改git commit --amend(2) 不删除工作空间改动代码, 撤销 commit, 同时撤销add123git reset HEAD^# 下面的效果和上面的一样git reset --mixed HEAD^(3) 不删除工作空间改动代码, 撤销 commit, 但是不撤销add1git reset --soft HEAD^(4) 删除工作空间改动代码(回到上次commit的样子)，撤销commit，撤销add1git reset --hard HEAD^[注]上面的HEAD^ 可以替代成HEAD~1,在 Git的1.8.5版本之后，HEAD有一个缩写形式@,既上面所有的HEAD都可以替换为@git push的撤销情景： 现在有一个文件a,第一次在a里面写入1, push成功了,第二次在a里面写入2, push也成功了,第三次在a里面写入3, push成功了,现在a的内容为’1,2,3’。通过 git reset 进行撤销(1) 如果你现在只是想撤回3的提交,那么你可以直接1234567891011# 通过 git long 查找到2的提交id, 下面的命令可以加上参数 --oneline 减少一些没有的信息git log# 查找到了，通过q退出查找q# 回滚git reset 2的commitId# 强制提交到远程分支git push origin 分支名 --force(2)如果想要撤回3,2的提交(同时撤销多个提交)123456789101112git logq# 回到 1处git reset 1的commitId# 把head重新移到最新的commitId, 这是你的内容还是1的内容, 没有这一步，后续的提交会报错git reset 远程分支最新的commitId# 提交git push[注]reset 的三个参数(hard,soft,mixed)，根据自身的需要进行选择添加通过 git revert 进行撤销(1) 如果你现在只是想撤回3的提交,那么你可以直接123456git logq# 此次的commitId为你想要撤销的Id，而不是下一个的commitIdgit revert 3处的commitIdgit push(2)如果想要撤回3,2的提交(同时撤销多个提交)1234git logqgit revert 3处的commitId 2处的commitIdgit push[注]revert运行跨commit进行回滚的，前提的是你想要回滚的commit涉及的文件，在后面都没有被修改过revert和reset的区别revert是提交一个新的commit来回滚的, commit的内容就是和已想要回滚的那个commit相反的操作reset 是直接删除指定的commit, 后续的commit记录是看不到的上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的建议：用git revert来撤销已经提交的更改，而git reset用来撤销没有提交的更改参考：git push之后回滚(撤销)代码","path":"2019/08/04/Git提交撤销/","date":"08-04","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]},{"title":"Git提交","text":"Git提交1. 代码提交平时如果使用Github，没有按照客户端的话,或者借助开发工具(eclipse, idea等自带的插件),我们都是通过Git的控制台进行操作的，如果要提交代码的话, 我们需要依次1234# 添加当前路径和路径下面的所有修改过的文件git add .git commit -m '提交的备注'git push我们可以通配置github免密提交，然后把上面的三个命令封装为一个shell脚本(也可以封装成window的cmd，可俺不会)，后续直接执行一次这个脚本,就能提交修改了1git add . &amp;&amp; git commit -m $1 &amp;&amp; git push新建一个push.sh文件，然后把上面的内容复制到文件内,然后把文件放到你的仓库的根目录,后续修改了代码，需要提交时只有打开git的bash 输入 sh push.sh &#39;提交的备注&#39;就行了缺点：每次提交都是全部内容提交，没法做出筛选(可以修改一下脚本, 增加一个参数：提交的目录文件)2. 将本地已有的代码提交到一个新的仓库如果你本地已有一部分写好的代码，现在想要用Github进行版本管理等，又不想改变本地的工作空间，那么你可以在Github上新建一个仓库，仓库名和你本地代码的工作空间的名称一样,(如，你的代码在D/code/project/Test, test下面就是你想要提交到Github的内容,那么你的仓库名就是Test)然后在你代码的根目录(也就是Test里面) 执行 git initgit remote add origin 你的仓库地址 把你本地和远程的git仓库绑定git pull 拉取远程仓库的内容git add . 把本地代码提交到git的缓存区 (如果有文件不想要提交的，提前建立好.gitignore文件进行过滤)git commit -m &#39;提交备注&#39;git push -u origin 你想要提交到的分支(master) 提交到远程仓库","path":"2019/08/04/Git提交/","date":"08-04","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]},{"title":"GitHubPages介绍","text":"GitHub Pages介绍12Websites for you and your projects.Hosted directly from your GitHub repository. Just edit, push, and your changes are live.我的理解：一个依托于Github仓库的展示你或者你的项目的静态网站。当你的网站做了修改，只有将其托送到对应的Github仓库,那么你的修改就能立即生效。2. 展示你基于GitHub Pages建立一个属于你自己的网站的步骤:(1)第一步建立一个仓库在Github上建立一个仓库，这个仓库和平时你存项目的仓库没有什么区别，唯一的要求就是仓库的名字的格式： {你的Github用户名}.github.io 这个格式是保证后续能够访问到你的仓库内容要求(2)在你的仓库里面新建一个index.html页面(index.html就是你的网站的入口)&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt; &lt;title&gt;Examples&lt;/title&gt; &lt;meta name=\"description\" content=\"\"&gt; &lt;meta name=\"keywords\" content=\"\"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello GitHub Pages !&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;通过上面2步上面，一个展示你的网站就完成了。这是你通过浏览器访问https://{你的Github用户名}.github.io你将看到你index里面的内容了: Hello GitHub Pages。后续你只要修改index.html页面或者添加新的页面，在提交到你的仓库，那么对应的页面就会修改。所以你完全可以通过GitPage做一个你想要的网站[注] 如果你拥有一个组织，也想建立一个展示你组织的网站,方式和上面类似，只是{你的Github用户名}修改为{你的组织的名}3. 展示你项目假设你把你的一个项目托管到了github,并将其开源了。那么为了让别人能开心的使用你的开源项目，当前需要有对应的说明文档吧。这是你会?直接写在readme开一个wiki这2种方式都可以。 现在你可以多一种方式了：为你的项目建一个GitHub Pages,通过网页的形式进行介绍第一步在你的开源项目下新建一个分支 (分支名：gh-pages)在你的分支里面放入你想要展示的页面(如果你的项目的master里面原本是有内容的，切的分支里面也会有对应的内容,因为这条分支后续是不会合并内容到主干的，所以可考虑把这些内容删除,方便后续的管理)这时你就可以通过 https://{你的用户名}.github.io/{你的项目仓库名(大小写要一致)}访问到你的项目了GitHub Pages了4. 注意事项GitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它5. 使用限制GitHub Pages源库建议限制在1GB内发布的GitHub Pages网站体积最大不能超过1GB,(还有每个月限制100000的访问量,但是从官网来看的话，这个限制应该是没有了)GitHub Page网站带宽限制是100GbGitHub Pages页面网站每小时最多有10次构建如果你超过了这些使用配额，Github官方将不会提供给你的网站提供服务，或者你可能会受到一个有礼貌的邮件，它是来自GitHub Support的建议策略，目的是降低你的网站对GitHub服务器的影响。建议其中包括迁移到一个不同的主机服务以便更加满足你的需求。6.禁止事项GitHub的服务条款禁止的或非法的内容或活动暴力或威胁性的内容或活动过多的自动化批量活动(例如，垃圾邮件)危害github用户或github服务的活动快速致富计划,也就是赌博等活动色情内容歪曲你的身份或网站目的的内容","path":"2019/08/01/GitHubPages介绍/","date":"08-01","excerpt":"","tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://lcn29.github.io/tags/GitHub/"}]}]}