<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lcn的博客</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lcn29.github.io/"/>
  <updated>2019-08-04T05:58:48.850Z</updated>
  <id>http://lcn29.github.io/</id>
  
  <author>
    <name>lcn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github免密提交</title>
    <link href="http://lcn29.github.io/2019/08/04/Github%E5%85%8D%E5%AF%86%E6%8F%90%E4%BA%A4/"/>
    <id>http://lcn29.github.io/2019/08/04/Github免密提交/</id>
    <published>2019-08-04T05:52:29.000Z</published>
    <updated>2019-08-04T05:58:48.850Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --><h1 id="GitHub免密提交"><a href="#GitHub免密提交" class="headerlink" title="GitHub免密提交"></a>GitHub免密提交</h1><p>通过git bash提交代码到github时，如果没有设置的话，每次都需要输入用户名和密码，很麻烦对吧。但是可以通过设置省去每次提交时输入用户名和密码的过程。</p><h2 id="1-基于Https"><a href="#1-基于Https" class="headerlink" title="1. 基于Https"></a>1. 基于Https</h2><p>1.进入到你的<code>C:/Users/{你的电脑的用户名}</code></p><p>2.查看是否有一个<code>.gitconfig</code>文件</p><p>(1)如果有,打开文件, 查看里面的用户名和邮箱是不是你github的信息，不是,需要进行修改</p><p>(2)如果没有, 依次输入 <code>git config --global user.email &quot;你注册GitHub用的邮箱&quot;</code> 和 <code>git config --global user.name &quot;你GitHub的用户名&quot;</code>, 如果正常的话，会在本地生成一个对应的<code>.gitconfig</code>文件, 文件里面是你刚刚输入过的用户名好邮箱</p><p>3.在本地新建一个<code>.git-credentials</code>文件, 文件里面的内容为<code>https:{GitHub的用户名}:{GitHub的登录密码}@github.com</code></p><p>4.执行命令<code>git config --global credential.helper store</code>, 这是你的<code>.gitconfig</code>的内容应该是这样的<br><img src="https://s2.ax1x.com/2019/07/28/elOnkn.png" alt="Alt &#39;gitconfig的内容&#39;"></p><p>5.这时你进行提交时，还是会要你输入一串用户名好密码，输入后，后续的提交都可以免密提交了</p><h2 id="2-基于SSH"><a href="#2-基于SSH" class="headerlink" title="2. 基于SSH"></a>2. 基于SSH</h2><ol><li><p>同https方式的第一步</p></li><li><p>同https方式的第二步</p></li><li><p>查看本地有没有一个<code>.ssh</code>的文件夹，如果有,里面的文件有文件名为<code>id_rsa</code>和<code>id_rsa.pub</code>的请先进行处理，因为后续生成的用于登录github的密钥的名字冲突了(当然，你也可以直接使用这已有的公钥和密钥，前提是对你没有影响)</p></li><li><p>输入要命令 <code>ssh-keygen -t rsa -C 你注册GitHub用的邮箱</code>,期间的三次询问，默认回车就行了，最后你会发现你的本地生成了一个<code>.ssh</code>的文件夹，里面有2个文件<code>id_rsa</code>和<code>id_rsa.pub</code></p></li><li><p>登录你的github,<br>(1) 在首页点击你头像, 在下来的选项中点击<code>Settings</code>,<br>(2) 在左侧的侧边栏，选择<code>SSH and GPG keys</code>,<br>(3) 在右侧中, 选择 <code>New SSH key</code><br>(4) 打开你本地.ssh文件夹里面的<code>id_rsa.pub</code>,复制里面的全部内容<br>(5) 回到Github刚刚打开的页面，在里面的title栏，输入一个可以让你知道这个公钥的作用的提示就行了，然后把你复制的内容黏贴到下面的key栏，点击<code>Add SSH Key</code>就行了。</p></li><li><p>这样只要你后续不删除<code>.ssh</code>里面的内容，你就可以一直免密提交东西到github了。</p></li></ol><h2 id="3-备注"><a href="#3-备注" class="headerlink" title="3. 备注"></a>3. 备注</h2><ol><li><p>因为我的系统是window的，所以上面的2种方式都是cd 到了 <code>C:/Users/{你的电脑的用户名}</code>, 如果是Mac,应该是<code>/Users/username</code></p></li><li><p>2种方式要实现免密提交的大前提还有：你的仓库是使用对应的方式克隆下来的。如果你的仓库是通过https克隆下面的，那么ssh的免密提交是不起作用的，同理,ssh克隆下来的,https的方式不起作用<br><img src="https://s2.ax1x.com/2019/07/28/elx5Ps.png" alt="Alt &#39;https&#39;"> <img src="https://s2.ax1x.com/2019/07/28/elzSR1.png" alt="Alt &#39;SSH&#39;"></p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;GitHub免密提交&quot;&gt;&lt;a href=&quot;#GitHub免密提交&quot; class=&quot;headerlink&quot; title=&quot;GitHub免
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Git提交撤销</title>
    <link href="http://lcn29.github.io/2019/08/04/Git%E6%8F%90%E4%BA%A4%E6%92%A4%E9%94%80/"/>
    <id>http://lcn29.github.io/2019/08/04/Git提交撤销/</id>
    <published>2019-08-04T04:58:23.000Z</published>
    <updated>2019-08-04T06:01:53.123Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --><h1 id="Git提交撤销"><a href="#Git提交撤销" class="headerlink" title="Git提交撤销"></a>Git提交撤销</h1><p>把自己修改后的代码提交到远程的主干,通常需要经过 本地工作目录 -&gt; 暂存区 -&gt; 本地分支 -&gt; 远程分支。 其中第一个箭头就是<code>git add</code>,第二个表示<code>git commit</code>, 第三个箭头表示<code>git push</code>。我们需要经过这3步才能将我们做的修改发布到远程的分支。这三步如果有哪一步提交了，但是你又想撤销了，都可以通过对应的命令进行撤销</p><h2 id="git-add的撤销"><a href="#git-add的撤销" class="headerlink" title="git add的撤销"></a>git add的撤销</h2><p>(1) 需要撤销全部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><p>(2) 只需要撤销某个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 你想要撤销的文件</span><br></pre></td></tr></table></figure><h2 id="git-commit的撤销"><a href="#git-commit的撤销" class="headerlink" title="git commit的撤销"></a>git commit的撤销</h2><p>(1) 因为提交的备注错了,只需要修改备注</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行下面的命令,会进入到vim模式，可以执行对你的备注进行修改</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>(2) 不删除工作空间改动代码, 撤销 commit, 同时撤销add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br><span class="line"><span class="comment"># 下面的效果和上面的一样</span></span><br><span class="line">git reset --mixed HEAD^</span><br></pre></td></tr></table></figure><p>(3) 不删除工作空间改动代码, 撤销 commit, 但是不撤销add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><p>(4) 删除工作空间改动代码(回到上次commit的样子)，撤销commit，撤销add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>[注]上面的<code>HEAD^</code> 可以替代成<code>HEAD~1</code>,在 Git的1.8.5版本之后，HEAD有一个缩写形式@,既上面所有的<code>HEAD</code>都可以替换为<code>@</code></p><h2 id="git-push的撤销"><a href="#git-push的撤销" class="headerlink" title="git push的撤销"></a>git push的撤销</h2><p>情景： 现在有一个文件<code>a</code>,</p><ol><li>第一次在<code>a</code>里面写入<code>1</code>, push成功了,</li><li>第二次在<code>a</code>里面写入<code>2</code>, push也成功了,</li><li>第三次在<code>a</code>里面写入<code>3</code>, push成功了,<br>现在a的内容为’1,2,3’。</li></ol><ul><li>通过 git reset 进行撤销</li></ul><p>(1) 如果你现在只是想撤回3的提交,那么你可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 git long 查找到2的提交id, 下面的命令可以加上参数 --oneline 减少一些没有的信息</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找到了，通过q退出查找</span></span><br><span class="line">q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">git reset 2的commitId</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制提交到远程分支</span></span><br><span class="line">git push origin 分支名 --force</span><br></pre></td></tr></table></figure><p>(2)如果想要撤回3,2的提交(同时撤销多个提交)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到 1处</span></span><br><span class="line">git reset 1的commitId</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把head重新移到最新的commitId, 这是你的内容还是1的内容,  没有这一步，后续的提交会报错</span></span><br><span class="line">git reset 远程分支最新的commitId</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>[注]reset 的三个参数(hard,soft,mixed)，根据自身的需要进行选择添加</p><ul><li>通过 git revert 进行撤销</li></ul><p>(1) 如果你现在只是想撤回3的提交,那么你可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">q</span><br><span class="line"><span class="comment"># 此次的commitId为你想要撤销的Id，而不是下一个的commitId</span></span><br><span class="line">git revert 3处的commitId</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>(2)如果想要撤回3,2的提交(同时撤销多个提交)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">q</span><br><span class="line">git revert 3处的commitId 2处的commitId</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>[注]revert运行跨commit进行回滚的，前提的是你想要回滚的commit涉及的文件，在后面都没有被修改过</p><ul><li>revert和reset的区别</li></ul><blockquote><ol><li>revert是提交一个新的commit来回滚的, commit的内容就是和已想要回滚的那个commit相反的操作</li><li>reset 是直接删除指定的commit, 后续的commit记录是看不到的</li><li>上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会</li><li>如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里</li><li>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert<br>是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的</li></ol></blockquote><p>建议：用git revert来撤销已经提交的更改，而git reset用来撤销没有提交的更改</p><p>参考：<br><a href="https://blog.csdn.net/qq_36460164/article/details/79857431" target="_blank" rel="noopener">git push之后回滚(撤销)代码</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Git提交撤销&quot;&gt;&lt;a href=&quot;#Git提交撤销&quot; class=&quot;headerlink&quot; title=&quot;Git提交撤销&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Git提交</title>
    <link href="http://lcn29.github.io/2019/08/04/Git%E6%8F%90%E4%BA%A4/"/>
    <id>http://lcn29.github.io/2019/08/04/Git提交/</id>
    <published>2019-08-04T01:33:49.000Z</published>
    <updated>2019-08-04T06:01:18.362Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --><h1 id="Git提交"><a href="#Git提交" class="headerlink" title="Git提交"></a>Git提交</h1><h2 id="1-代码提交"><a href="#1-代码提交" class="headerlink" title="1. 代码提交"></a>1. 代码提交</h2><p>平时如果使用Github，没有按照客户端的话,或者借助开发工具(eclipse, idea等自带的插件),我们都是通过Git的控制台进行操作的，如果要提交代码的话, 我们需要依次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加当前路径和路径下面的所有修改过的文件</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'提交的备注'</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>我们可以通配置github免密提交，然后把上面的三个命令封装为一个shell脚本(也可以封装成window的cmd，可俺不会)，后续直接执行一次这个脚本,就能提交修改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . &amp;&amp; git commit -m <span class="variable">$1</span> &amp;&amp; git push</span><br></pre></td></tr></table></figure><p>新建一个<code>push.sh</code>文件，然后把上面的内容复制到文件内,然后把文件放到你的仓库的根目录,后续修改了代码，需要提交时只有打开git的bash 输入 <code>sh push.sh &#39;提交的备注&#39;</code>就行了</p><p>缺点：每次提交都是全部内容提交，没法做出筛选(可以修改一下脚本, 增加一个参数：提交的目录文件)</p><h2 id="2-将本地已有的代码提交到一个新的仓库"><a href="#2-将本地已有的代码提交到一个新的仓库" class="headerlink" title="2. 将本地已有的代码提交到一个新的仓库"></a>2. 将本地已有的代码提交到一个新的仓库</h2><p>如果你本地已有一部分写好的代码，现在想要用Github进行版本管理等，又不想改变本地的工作空间，那么你可以</p><blockquote><ol><li>在Github上新建一个仓库，仓库名和你本地代码的工作空间的名称一样,(如，你的代码在<code>D/code/project/Test</code>, test下面就是你想要提交到Github的内容,那么你的仓库名就是Test)</li><li>然后在你代码的根目录(也就是Test里面) 执行 <code>git init</code></li><li><code>git remote add origin 你的仓库地址</code> 把你本地和远程的git仓库绑定</li><li><code>git pull</code> 拉取远程仓库的内容</li><li><code>git add .</code> 把本地代码提交到git的缓存区 (如果有文件不想要提交的，提前建立好<code>.gitignore</code>文件进行过滤)</li><li><code>git commit -m &#39;提交备注&#39;</code></li><li><code>git push -u origin 你想要提交到的分支(master)</code> 提交到远程仓库</li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Git提交&quot;&gt;&lt;a href=&quot;#Git提交&quot; class=&quot;headerlink&quot; title=&quot;Git提交&quot;&gt;&lt;/a&gt;Git提交&lt;
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHubPages介绍</title>
    <link href="http://lcn29.github.io/2019/08/01/GitHubPages%E4%BB%8B%E7%BB%8D/"/>
    <id>http://lcn29.github.io/2019/08/01/GitHubPages介绍/</id>
    <published>2019-08-01T12:00:32.000Z</published>
    <updated>2019-08-01T15:40:35.902Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --><h1 id="GitHub-Pages介绍"><a href="#GitHub-Pages介绍" class="headerlink" title="GitHub Pages介绍"></a>GitHub Pages介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Websites <span class="keyword">for</span> you and your projects.</span><br><span class="line">Hosted directly from your GitHub repository. Just edit, push, and your changes are live.</span><br></pre></td></tr></table></figure><p>我的理解：</p><ul><li>一个依托于Github仓库的展示你或者你的项目的静态网站。</li><li>当你的网站做了修改，只有将其托送到对应的Github仓库,那么你的修改就能立即生效。</li></ul><h2 id="2-展示你"><a href="#2-展示你" class="headerlink" title="2. 展示你"></a>2. 展示你</h2><p>基于GitHub Pages建立一个属于你自己的网站的步骤:</p><p>(1)第一步建立一个仓库<br>在Github上建立一个仓库，这个仓库和平时你存项目的仓库没有什么区别，唯一的要求就是仓库的名字的格式： <code>{你的Github用户名}.github.io</code> 这个格式是保证后续能够访问到你的仓库内容要求</p><p>(2)在你的仓库里面新建一个index.html页面(index.html就是你的网站的入口)</p><pre><code class="html"><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Examples<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello GitHub Pages !<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><p>通过上面2步上面，一个展示你的网站就完成了。这是你通过浏览器访问<code>https://{你的Github用户名}.github.io</code>你将看到你index里面的内容了: Hello GitHub Pages。</p><p>后续你只要修改index.html页面或者添加新的页面，在提交到你的仓库，那么对应的页面就会修改。所以你完全可以通过GitPage做一个你想要的网站</p><p>[注] 如果你拥有一个组织，也想建立一个展示你组织的网站,方式和上面类似，只是<code>{你的Github用户名}</code>修改为<code>{你的组织的名}</code></p><h2 id="3-展示你项目"><a href="#3-展示你项目" class="headerlink" title="3. 展示你项目"></a>3. 展示你项目</h2><p>假设你把你的一个项目托管到了github,并将其开源了。那么为了让别人能开心的使用你的开源项目，当前需要有对应的说明文档吧。这是你会?</p><blockquote><ol><li>直接写在readme</li><li>开一个wiki</li></ol></blockquote><p>这2种方式都可以。 现在你可以多一种方式了：为你的项目建一个GitHub Pages,通过网页的形式进行介绍</p><ul><li>第一步在你的开源项目下新建一个分支 (分支名：gh-pages)</li><li>在你的分支里面放入你想要展示的页面(如果你的项目的master里面原本是有内容的，切的分支里面也会有对应的内容,因为这条分支后续是不会合并内容到主干的，所以可考虑把这些内容删除,方便后续的管理)</li></ul><p>这时你就可以通过 <code>https://{你的用户名}.github.io/{你的项目仓库名(大小写要一致)}</code>访问到你的项目了GitHub Pages了</p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><p>GitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它</p><h2 id="5-使用限制"><a href="#5-使用限制" class="headerlink" title="5. 使用限制"></a>5. 使用限制</h2><blockquote><ol><li>GitHub Pages源库建议限制在1GB内</li><li>发布的GitHub Pages网站体积最大不能超过1GB,(还有每个月限制100000的访问量,但是从<a href="https://help.github.com/en/articles/what-is-github-pages" target="_blank" rel="noopener">官网</a>来看的话，这个限制应该是没有了)</li><li>GitHub Page网站带宽限制是100Gb</li><li>GitHub Pages页面网站每小时最多有10次构建</li></ol></blockquote><p>如果你超过了这些使用配额，Github官方将不会提供给你的网站提供服务，或者你可能会受到一个有礼貌的邮件，它是来自GitHub Support的建议策略，目的是降低你的网站对GitHub服务器的影响。建议其中包括迁移到一个不同的主机服务以便更加满足你的需求。</p><h2 id="6-禁止事项"><a href="#6-禁止事项" class="headerlink" title="6.禁止事项"></a>6.禁止事项</h2><blockquote><ol><li>GitHub的服务条款禁止的或非法的内容或活动</li><li>暴力或威胁性的内容或活动</li><li>过多的自动化批量活动(例如，垃圾邮件)</li><li>危害github用户或github服务的活动</li><li>快速致富计划,也就是赌博等活动</li><li>色情内容</li><li>歪曲你的身份或网站目的的内容</li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Aug 04 2019 14:11:00 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;GitHub-Pages介绍&quot;&gt;&lt;a href=&quot;#GitHub-Pages介绍&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
</feed>
