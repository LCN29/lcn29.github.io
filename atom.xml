<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lcn的博客</title>
  
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lcn29.github.io/"/>
  <updated>2019-08-04T08:18:06.297Z</updated>
  <id>http://lcn29.github.io/</id>
  
  <author>
    <name>lcn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速搭建一个自己的博客</title>
    <link href="http://lcn29.github.io/2019/08/04/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lcn29.github.io/2019/08/04/快速搭建一个自己的博客/</id>
    <published>2019-08-04T06:36:50.000Z</published>
    <updated>2019-08-04T08:18:06.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --><h1 id="快速搭建一个自己的博客"><a href="#快速搭建一个自己的博客" class="headerlink" title="快速搭建一个自己的博客"></a>快速搭建一个自己的博客</h1><p>做一个自己的博客网站，基本可以从很多方面入手。从购买服务器到自己编写页面，从dns到页面优化。投入的越多,理所当然的你的网站体验就越好等。但是考虑到时间,价钱等原因，我们可以站在前人的基础上，选择最合适方式搭建自己的网站, 达到快速的搭建。</p><h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><blockquote><ol><li>GitHub + Hexo + Markdown (推荐)</li><li>GitHub + Jekyll + Markdown</li><li>自选服务器 + Wordpress + 插件</li><li>…</li></ol></blockquote><p>从免费的角度出发的话,很多人都会选择前2种吧。 而hexo是需要node环境,jekeyll需要ruby，同时hexo有现成的中文文档，所以在搭建本站是采用了Hexo,环境搭建简单的同时还有中文文档。</p><p>那么开始吧,我们的博客搭建之路</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p>1.因为用到了Github，所以需要你本地有git的环境<br>window 可以到Git的官网下载一个<a href="https://gitforwindows.org/" target="_blank" rel="noopener">GitBash</a>，一路默认配置安装就行了。</p></li><li><p>node环境安装<br>到node的官网下载一个<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node</a>，双击安装就行了。</p></li><li><p>2.安装hexo<br>打开你的cmd,执行一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完,执行下面的命令, 可以打印出hexo-cli 的版本号,就是安装完成了</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li><li><p>3.初始你的博客工作空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新版本的hexo,在你初始的过程中,会把你项目的依赖都下来了, 也就是npm install 可以不应执行了</span></span><br><span class="line">hexo init 你的工作空间的名字</span><br></pre></td></tr></table></figure></li><li><p>4.启动你的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到你的工作空间</span></span><br><span class="line"><span class="built_in">cd</span> /你的工作空间的名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包，生成网站的文件</span></span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul><p>这时打开你的浏览器,访问 <code>http://localhost:4000</code>就能看到你的网站了,如果想要停止的话, 在你的命令窗口输入<code>ctrl+C</code>就行了,自此你的环境就搭建成功了。</p><p>如果你有将东西备份在GitHub的习惯的话，或者利用Github来做版本管理等,这时候可以把你的项目放到Github上了,步骤可以参考<a href="/2019/08/04/Git提交/">这里</a></p><h2 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h2><p>hexo初始的主题是不是有点丑呢?这时候，如果你是一个前端大佬，想要从0 开始，自定义想要的页面样子的话，可以参考官网的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>进行开发了. 如果你和我一样，对自己的审美,适配等原因而无奈的话，我们可以套用别人分享的主题。</p><ul><li><p>1.主题寻找<br>首先进入hexo<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>,你可以看到有很多别人分享的主题,从中选择一款你喜欢的, 本站使用的主题是这个：<a href="http://sora3.coding.me/" target="_blank" rel="noopener">gal</a>, 感谢作者的分享。说明一下，网上找的的资料，大部分的人都是以<a href="https://theme-next.org/" target="_blank" rel="noopener">Next</a>为例子, 文档挺全的,同时next主题也有很多人进行2次开发,样子也都挺好看的，所以如果你没有什么要求，可以尝试使用next, 后面的配置,改造有很多巨人肩膀可以给你依靠。</p></li><li><p>2.导入主题</p></li></ul><blockquote><ol><li>找到了自己想要的主题后, 可以点击一下主题的标题，正常情况下是可以进入到作者分享的主题的github仓库。仓库的克隆地址。</li><li>打开你本地项目的目录, 进入到你的themes目录,然后把刚刚的主题仓库克隆下来,把文件夹的名字复制下来</li><li>回到你项目的根目录, 打开<code>_config.yml</code>, 有的主题在他们仓库的readme,有教你们如何配置,很多都是会把他们仓库名和主题名弄混淆,比如: <code>hexo-theme-A-RSnippet</code> ,文档说的配置是<code>a-rsnippet</code>,之所以能起作用,是他们在克隆仓库时,指定了本地的文件夹名,但是这一步很多文档是没有说的，所以很容易出现你的themes下的主题是<code>hexo-theme-A-RSnippet</code>, 但是你的配置是<code>a-rsnippet</code>，所以主题不起作用.</li></ol></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把theme修改为你的第二步复制下来的文件夹名, </span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">文件夹名(themes下一定要有和它对应的名字一模一样的主题存在)</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>安装你想要的主题的配置文档进行其他相对应的配置。比如我使用的gal主题,需要先安装<code>hexo-renderer-sass</code>和<code>hexo-renderer-scss</code>, 才能将主题里面的scss文件编译成css文件</li><li>启动项目, 这时你的的主题已经起作用了(下面的就是启动命令,后续的重启服务基本都是需要走一遍这个流程)</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clean 清除上一次生成的文件   </span></span><br><span class="line">hexo clean </span><br><span class="line"><span class="comment"># 重新生成新的文件</span></span><br><span class="line">hexo g </span><br><span class="line"><span class="comment"># 启动你的服务</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><blockquote><ol start="6"><li>这时,如果你想把可以代码提交到Github时,会报错<code>You&#39;ve added another git repository inside your current repository.</code> 大概的意思是你仓库里面有另一个仓库(你的主题仓库)。解决：进入到themes/你下载的主题/里面, 删除里面的<code>.git</code>文件，在回到你的项目的跟目录 <code>git rm --cached -f themes/你下载的主题/</code>,后面你就能提交了</li></ol></blockquote><h2 id="定制化你的博客"><a href="#定制化你的博客" class="headerlink" title="定制化你的博客"></a>定制化你的博客</h2><p>这个基本可以通过查看对应主题的文档进行改造，比如添加<code>归档</code>,<code>404页面</code>等,根据自己的需要和对应主题的文档进行修改就行了。</p><h2 id="新建你的文章"><a href="#新建你的文章" class="headerlink" title="新建你的文章"></a>新建你的文章</h2><p>开始你的书写博客之路了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文章的名字</span><br></pre></td></tr></table></figure><p>这时在 你的项目的根目录<code>/source/_posts</code> 下面有一个 <code>你命名的文章的名字.md</code>的文件。打开,你就可以通过markdown写下你的内容了(注头部的内容不能删除), 重新走一遍从重启服务, 这是你就能看到你写的文章了。</p><h2 id="发布你的博客"><a href="#发布你的博客" class="headerlink" title="发布你的博客"></a>发布你的博客</h2><p>利用Github Pages功能,部署到服务器, 方便别人可查看, 不了解GitHub Pages的可以先看一下<a href="/2019/08/01/GitHubPages介绍/">这里</a><br>(1) 先建立一个仓库名为<code>{你的GitHub的用户名}.github.io</code>的仓库,然后把它克隆到你本地,<br>(2) 把博客项目里的<code>public</code>目录内的所有的文件复制到刚克隆下来的仓库里,然后提交到GitHub上<br>(3) 这是通过浏览器访问<code>https://{你的GitHub的用户名}.github.io</code>就能访问到你的网站了<br>到此你网站就算是完成了,但是这是最简单的一个静态网站，只具备了看的功能，我们来为我们的网站增加功能吧</p><h2 id="自动发布代码到你仓库"><a href="#自动发布代码到你仓库" class="headerlink" title="自动发布代码到你仓库"></a>自动发布代码到你仓库</h2><p>每次你修改了文章等,如果都要重复上面的步骤(1)(2),是一个麻烦的过程,而Hexo为我们提供了一个插件,用于省略发布的过程(Hexo还提供了很多插件，有兴趣的可以到官网了解一下)<br>(1)配置你本地能够免密(SSH方式)提交代码到Github, 配置的过程可以查看<a href="/2019/08/04/Github免密提交/">这里</a><br>(2)安装自动发布插件 <code>npm install hexo-deployer-git --save</code><br>(3)在根目录的<code>_config.xml</code>文件添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">    git:</span> <span class="string">你GitHub</span> <span class="string">Pages仓库的地址,注意此次需要为ssh的地址,如果是https的是不能上传的</span></span><br></pre></td></tr></table></figure><p>(4)后续你要把你的页面发布到对应的仓库时,只需要通过下面的命令就能发布到对应的仓库了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>(1) 首先需要你的主题支持评论(现在大多数的主题都支持的,但是不排除没有的是不)<br>(2)评论插件选取</p><blockquote><ol><li>Hypercomments</li><li>来必力</li><li>Gitment</li><li>Gittalk</li><li>…</li></ol></blockquote><p>因为用的主题gal，用到是Gitment(为了可以自定义评论区的样式)，所以此次以Gitment作为例子(Gitment的作者已经一年多没维护这个项目了,所以可以的话，试着换另一个插件),其他的插件，根据对应的文档进行配置就行了。<br>(3)到GitHub的这里注册一个oAuth(Gitment是利用Github的issure作为评论存储的)。地址在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">这里</a><br><img src="https://s2.ax1x.com/2019/07/30/eJgr1H.png" alt="Alt &#39;GitHub oAuth&#39;"><br>如图：里面的Homepage URL 和 Authorization callback如果你的项目是基于GitPages并且没有绑定自己的域名的话，按照上面的配置就可以了,如果你基于GitPages但是又绑定了自己的域名,则填自己的域名就行了,其他的搭建在自己的服务器的,则填自己服务器的对应的首页。注册成功后，你将会得到一个Client ID和Client Secret。</p><p>(4)按照你的主题的设置,开启对应的设置,然后把client id 和 client secret 配置进你的文件就行了。如下，是gal主题的配置<br><img src="https://s2.ax1x.com/2019/07/30/eJWz8S.md.png" alt="Alt &#39;gal的配置&#39;"><br>这样你的系统就具备了评论的前提了。</p><p>(5)当你的文章开启了评论功能后，你打开页面, 登录后, 你会发现你的文章下有个要你初始评论的按钮，只有你点了初始，才能进行评论。这是因为Gitment是基于GitHub的issues功能的，如果要能发issues，需要有人先开启一个issure，所以你的初始按钮就是起到初始的功能<br><img src="https://s2.ax1x.com/2019/08/04/eyOJ54.png" alt="Alt &#39;评论初始化&#39;"><br>不同主题的这个初始样式是不一样的哦,此处为gal主题的样式,也有可能你的主题是没有这个的</p><h2 id="脚本自动化评论"><a href="#脚本自动化评论" class="headerlink" title="脚本自动化评论"></a>脚本自动化评论</h2><p>如果你一次添加了很多文章，那么后续发布后, 你需要手动的登录你的网站，然后一个个的给他们初始化评论, 对自己不太好吧。我们可以通过脚本的形式每次给没有初始化过的文章自动初始。</p><p>(1)首先你需要一个access token允许你通过api的方式操作你的仓库。Access token的申请，可以点<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">这里</a>, 点击右上角的<code>Generate new token</code>, 输入你的登录密码后，就能看到下面的<br><img src="https://s2.ax1x.com/2019/07/30/eJ4ZX4.md.png" alt="Alt ‘AccessToken’"> 只需要把repo的勾上，点击Generate Token就行了。这时你会得到一串秘钥。保存起来,同时不要泄露了,如果其他人得到了这个秘钥，那么就可以通过api的方式操作你的仓库了。</p><p>(2)安装可以生成网站生成站点图的插件(站点图：就是一个包含你网站所有的网页的文件,便于搜索引擎抓取你的网站)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>(3)在你的项目的的配置文件里面加上</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网站站点图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap/sitemap.xml</span>    </span><br><span class="line"><span class="comment"># 百度站点图</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap/baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>有了这个配置那么后续你的打包，都会在public目录下面生成一个sitemap目录,目录里面有2个上面配置的文件,这2个文件都是用于搜索引擎抓取你的网站用的, 只是一个是专门给百度用，一个是通用的</p><p>(4) 新建一个自己初始脚本<br>脚本的内容在 <a href="https://github.com/LCN29/HexoGenerator/blob/master/initComment.js" target="_blank" rel="noopener">这里</a>。(里面的配置的Token已经失效了, Github在你把代码提交的时候，检测到里面有对应的Token，就会将你的token失效掉，所以当你的代码提交到Github时为了不让token失效，需要先把他删除了,再提交) 放到你的项目的根目录，这个脚本需要你根据自己的主题进行修改，里面最重要的是这个</p><p>(5) token的管理<br>因为GitHub不允许在脚本里面出现token，但是如果token不好保存，这个还会限制到你的异地开发。可以利用<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis</a>管理你的仓库，同时管理你的token。因为这个东西, 我还在摸索中，就不介绍了</p><h2 id="添加统计"><a href="#添加统计" class="headerlink" title="添加统计"></a>添加统计</h2><p>有了统计功能能够帮你更清晰的认清你的网站的情况,而我们的网站是一个静态的网站,想要拥有统计的功能,就需要借助第三方的服务了。<br>现在第三方的插件已知的有2种:leancloud和不蒜子。但是使用这2个需要你的主题支持(不支持的话，当然你也可以对页面进行修改的), 在我这边的使用中：leancloud用于在文章的访问量统计,不蒜子用于网站的访问量的统计。</p><p>(1)不蒜子的使用：<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">这里</a>。使用很简单,在你的项目的根目录 <code>themes/你的主题/layout/_partial/head.ejs/swing</code> 引入想要的js文件,然后在 <code>themes/你的主题/layout/_partial/footer.ejs/swing</code>引入对应的统计标签就行了</p><p>(2) leancloud: 使用leancloud需要实名认证，所以我的博客没有使用(在gal主题, 不使用leancloud,那么首页的文章的阅读量就无法获取了,受到了影响就这个,进入到每篇文章的的页面，文章的阅读量还是可以通过不蒜子实现的),但是Leancloud是Hexo推荐的统计插件,还是可以试着使用一下的。使用的话，可以参考<a href="https://www.jianshu.com/p/702a7aec4d00" target="_blank" rel="noopener">这里</a></p><h2 id="添加live-2d-也就是页面左下角的小人了"><a href="#添加live-2d-也就是页面左下角的小人了" class="headerlink" title="添加live-2d(也就是页面左下角的小人了)"></a>添加live-2d(也就是页面左下角的小人了)</h2><p>(1) 安装对应的插件 <code>npm install --save hexo-helper-live2d</code><br>(2) 然后到<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">这里</a>可以找到部分live-2d模型的预览，挑选一个自己喜欢的，复制下名字<br>(3) 安装对应的模型<code>npm install --save npm install live2d-widget-model-模型的名称</code><br>(4) 在你项目的根目录新建一个文件夹<code>live2d_models</code>,然后到node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中<br>(5) 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-模型的名称</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">left/right</span> </span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span>  <span class="string">(live-2d</span> <span class="string">的显示宽)</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">400</span> <span class="string">(live-2d</span> <span class="string">的显示高)</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    opacity:</span> <span class="number">0.9</span></span><br></pre></td></tr></table></figure><h2 id="点击心形效果"><a href="#点击心形效果" class="headerlink" title="点击心形效果"></a>点击心形效果</h2><p>(1)引入<a href="https://github.com/LCN29/HexoGenerator/blob/master/themes/hexo-theme-gal/source/js/clicklove.js" target="_blank" rel="noopener">脚本</a>，放到<code>项目的根目录/themes/你下载的主题/source/js/</code><br>(2)打开 <code>项目的根目录/themes/你下载的主题/source/layout/_partial/head.ejs/swing</code> 引入这个js</p><h2 id="Rss功能"><a href="#Rss功能" class="headerlink" title="Rss功能"></a>Rss功能</h2><p>一个类似于订阅的功能,用户点击了rss,就相当于订阅了你，你后续发布了新的文章，订阅的用户就可以知道。(gal主题不支持这个,但是我这个做了一点小修改, 将其放到了个人的链接里面了)</p><p>(1) 安装插件 <code>npm install --save hexo-generator-feed</code></p><p>(2) 配置(这时候你的RSS链接就是 域名/atom.xml)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rss配置</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="comment"># 0 全部, atom.xml每次生成容纳多少文章</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>(3)现在你的网站已经支持Rss功能了, 但是用户的使用需要RSS阅读器,rss阅读器的选择可以看<a href="https://sspai.com/post/44420" target="_blank" rel="noopener">这个</a>,我使用的是<a href="https://www.inoreader.com" target="_blank" rel="noopener">InoReader</a>,因为是国外的,所以速度有点慢。</p><h2 id="静态文件压缩"><a href="#静态文件压缩" class="headerlink" title="静态文件压缩"></a>静态文件压缩</h2><p>现在已知的压缩方式有2种: gulp和hexo-neat。 gulp我试过2次，都报错了, 放弃了。 这里介绍一下hexo-neat。<br>(1)安装插件 <code>npm install --save hexo-neat</code><br>(2)配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line">  <span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/*.min.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'**/clicklove.js'</span></span><br></pre></td></tr></table></figure><p>通过这个插件可以对html, css, js进行压缩，但是在压缩js是会报错,可以把上面压缩js的开关关掉就行了。</p><h2 id="关联域名"><a href="#关联域名" class="headerlink" title="关联域名"></a>关联域名</h2><p>本身没有绑定域名，所以没设置,可以参考<a href="https://blog.csdn.net/damienzhong/article/details/84335558" target="_blank" rel="noopener">这个</a></p><h2 id="设置coding-让百度收录"><a href="#设置coding-让百度收录" class="headerlink" title="设置coding,让百度收录"></a>设置coding,让百度收录</h2><p>hexo托管在github了，但是github是国外的，百度的爬虫是不能够爬取github的。如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管,Coding可以看做是国内版的GitHub,大体的操作和GitHub差不多。</p><p>(1) 到coding注册一个个人账号，记住不是组织账号，现在coding应该被腾讯云整合之类的，所以只能通过qq,微信进行注册了。<br>(2) 在coding建立一个 <code>{你的coding名}.coding.me</code>的仓库,同时开启Pages功能<br>(3) 配置免密登录,可以使用和github一样的公钥<br>(4) 配置一下你的<code>_config.yml</code>文件, 后续你发包后，内容都会在GitHub和Coding同时发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署部分设置</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">    coding: git@git.dev.tencent.com:coding用户名/用户名.coding.me.git</span><br><span class="line">    git: git@github.com:用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure><p>这时你能想访问GitHub Pages 一样访问你在coding上的页面了, 格式 <code>https://{你的coding名}.coding.me</code></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>自此, 利用hexo搭建自己的博客的过程就玩了, 上面的流程可以根据自己的需要进行选择,同时也可以增加, 比如引入音乐功能(我的博客就增加了)等其他功能，可以根据自己的需要进行取舍。 同时如开头说的，现在你博客网站的优化是无上限的。<br>(1)比如我们可以把我们的网站的大量图片放到图床上优化网站的加载速度，或者为了保证质量，也可以通过购买其他的服务商的<code>对象存储 OSS</code>做自己的图床<br>(2)在你的网站前面，设置多一次cdn<br>(3)自购服务器, 配合nginx,tomcat等,让网站运行在你自己的服务器上<br>最后,祝各位搭建出自己满意的博客网站</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;快速搭建一个自己的博客&quot;&gt;&lt;a href=&quot;#快速搭建一个自己的博客&quot; class=&quot;headerlink&quot; title=&quot;快速搭建一
      
    
    </summary>
    
      <category term="Hexo" scheme="http://lcn29.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://lcn29.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github免密提交</title>
    <link href="http://lcn29.github.io/2019/08/04/Github%E5%85%8D%E5%AF%86%E6%8F%90%E4%BA%A4/"/>
    <id>http://lcn29.github.io/2019/08/04/Github免密提交/</id>
    <published>2019-08-04T05:52:29.000Z</published>
    <updated>2019-08-04T05:58:48.850Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --><h1 id="GitHub免密提交"><a href="#GitHub免密提交" class="headerlink" title="GitHub免密提交"></a>GitHub免密提交</h1><p>通过git bash提交代码到github时，如果没有设置的话，每次都需要输入用户名和密码，很麻烦对吧。但是可以通过设置省去每次提交时输入用户名和密码的过程。</p><h2 id="1-基于Https"><a href="#1-基于Https" class="headerlink" title="1. 基于Https"></a>1. 基于Https</h2><p>1.进入到你的<code>C:/Users/{你的电脑的用户名}</code></p><p>2.查看是否有一个<code>.gitconfig</code>文件</p><p>(1)如果有,打开文件, 查看里面的用户名和邮箱是不是你github的信息，不是,需要进行修改</p><p>(2)如果没有, 依次输入 <code>git config --global user.email &quot;你注册GitHub用的邮箱&quot;</code> 和 <code>git config --global user.name &quot;你GitHub的用户名&quot;</code>, 如果正常的话，会在本地生成一个对应的<code>.gitconfig</code>文件, 文件里面是你刚刚输入过的用户名好邮箱</p><p>3.在本地新建一个<code>.git-credentials</code>文件, 文件里面的内容为<code>https:{GitHub的用户名}:{GitHub的登录密码}@github.com</code></p><p>4.执行命令<code>git config --global credential.helper store</code>, 这是你的<code>.gitconfig</code>的内容应该是这样的<br><img src="https://s2.ax1x.com/2019/07/28/elOnkn.png" alt="Alt &#39;gitconfig的内容&#39;"></p><p>5.这时你进行提交时，还是会要你输入一串用户名好密码，输入后，后续的提交都可以免密提交了</p><h2 id="2-基于SSH"><a href="#2-基于SSH" class="headerlink" title="2. 基于SSH"></a>2. 基于SSH</h2><ol><li><p>同https方式的第一步</p></li><li><p>同https方式的第二步</p></li><li><p>查看本地有没有一个<code>.ssh</code>的文件夹，如果有,里面的文件有文件名为<code>id_rsa</code>和<code>id_rsa.pub</code>的请先进行处理，因为后续生成的用于登录github的密钥的名字冲突了(当然，你也可以直接使用这已有的公钥和密钥，前提是对你没有影响)</p></li><li><p>输入要命令 <code>ssh-keygen -t rsa -C 你注册GitHub用的邮箱</code>,期间的三次询问，默认回车就行了，最后你会发现你的本地生成了一个<code>.ssh</code>的文件夹，里面有2个文件<code>id_rsa</code>和<code>id_rsa.pub</code></p></li><li><p>登录你的github,<br>(1) 在首页点击你头像, 在下来的选项中点击<code>Settings</code>,<br>(2) 在左侧的侧边栏，选择<code>SSH and GPG keys</code>,<br>(3) 在右侧中, 选择 <code>New SSH key</code><br>(4) 打开你本地.ssh文件夹里面的<code>id_rsa.pub</code>,复制里面的全部内容<br>(5) 回到Github刚刚打开的页面，在里面的title栏，输入一个可以让你知道这个公钥的作用的提示就行了，然后把你复制的内容黏贴到下面的key栏，点击<code>Add SSH Key</code>就行了。</p></li><li><p>这样只要你后续不删除<code>.ssh</code>里面的内容，你就可以一直免密提交东西到github了。</p></li></ol><h2 id="3-备注"><a href="#3-备注" class="headerlink" title="3. 备注"></a>3. 备注</h2><ol><li><p>因为我的系统是window的，所以上面的2种方式都是cd 到了 <code>C:/Users/{你的电脑的用户名}</code>, 如果是Mac,应该是<code>/Users/username</code></p></li><li><p>2种方式要实现免密提交的大前提还有：你的仓库是使用对应的方式克隆下来的。如果你的仓库是通过https克隆下面的，那么ssh的免密提交是不起作用的，同理,ssh克隆下来的,https的方式不起作用<br><img src="https://s2.ax1x.com/2019/07/28/elx5Ps.png" alt="Alt &#39;https&#39;"> <img src="https://s2.ax1x.com/2019/07/28/elzSR1.png" alt="Alt &#39;SSH&#39;"></p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;GitHub免密提交&quot;&gt;&lt;a href=&quot;#GitHub免密提交&quot; class=&quot;headerlink&quot; title=&quot;GitHub免
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Git提交撤销</title>
    <link href="http://lcn29.github.io/2019/08/04/Git%E6%8F%90%E4%BA%A4%E6%92%A4%E9%94%80/"/>
    <id>http://lcn29.github.io/2019/08/04/Git提交撤销/</id>
    <published>2019-08-04T04:58:23.000Z</published>
    <updated>2019-08-04T06:01:53.123Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --><h1 id="Git提交撤销"><a href="#Git提交撤销" class="headerlink" title="Git提交撤销"></a>Git提交撤销</h1><p>把自己修改后的代码提交到远程的主干,通常需要经过 本地工作目录 -&gt; 暂存区 -&gt; 本地分支 -&gt; 远程分支。 其中第一个箭头就是<code>git add</code>,第二个表示<code>git commit</code>, 第三个箭头表示<code>git push</code>。我们需要经过这3步才能将我们做的修改发布到远程的分支。这三步如果有哪一步提交了，但是你又想撤销了，都可以通过对应的命令进行撤销</p><h2 id="git-add的撤销"><a href="#git-add的撤销" class="headerlink" title="git add的撤销"></a>git add的撤销</h2><p>(1) 需要撤销全部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><p>(2) 只需要撤销某个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 你想要撤销的文件</span><br></pre></td></tr></table></figure><h2 id="git-commit的撤销"><a href="#git-commit的撤销" class="headerlink" title="git commit的撤销"></a>git commit的撤销</h2><p>(1) 因为提交的备注错了,只需要修改备注</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行下面的命令,会进入到vim模式，可以执行对你的备注进行修改</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>(2) 不删除工作空间改动代码, 撤销 commit, 同时撤销add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br><span class="line"><span class="comment"># 下面的效果和上面的一样</span></span><br><span class="line">git reset --mixed HEAD^</span><br></pre></td></tr></table></figure><p>(3) 不删除工作空间改动代码, 撤销 commit, 但是不撤销add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><p>(4) 删除工作空间改动代码(回到上次commit的样子)，撤销commit，撤销add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>[注]上面的<code>HEAD^</code> 可以替代成<code>HEAD~1</code>,在 Git的1.8.5版本之后，HEAD有一个缩写形式@,既上面所有的<code>HEAD</code>都可以替换为<code>@</code></p><h2 id="git-push的撤销"><a href="#git-push的撤销" class="headerlink" title="git push的撤销"></a>git push的撤销</h2><p>情景： 现在有一个文件<code>a</code>,</p><ol><li>第一次在<code>a</code>里面写入<code>1</code>, push成功了,</li><li>第二次在<code>a</code>里面写入<code>2</code>, push也成功了,</li><li>第三次在<code>a</code>里面写入<code>3</code>, push成功了,<br>现在a的内容为’1,2,3’。</li></ol><ul><li>通过 git reset 进行撤销</li></ul><p>(1) 如果你现在只是想撤回3的提交,那么你可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 git long 查找到2的提交id, 下面的命令可以加上参数 --oneline 减少一些没有的信息</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找到了，通过q退出查找</span></span><br><span class="line">q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">git reset 2的commitId</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制提交到远程分支</span></span><br><span class="line">git push origin 分支名 --force</span><br></pre></td></tr></table></figure><p>(2)如果想要撤回3,2的提交(同时撤销多个提交)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到 1处</span></span><br><span class="line">git reset 1的commitId</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把head重新移到最新的commitId, 这是你的内容还是1的内容,  没有这一步，后续的提交会报错</span></span><br><span class="line">git reset 远程分支最新的commitId</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>[注]reset 的三个参数(hard,soft,mixed)，根据自身的需要进行选择添加</p><ul><li>通过 git revert 进行撤销</li></ul><p>(1) 如果你现在只是想撤回3的提交,那么你可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">q</span><br><span class="line"><span class="comment"># 此次的commitId为你想要撤销的Id，而不是下一个的commitId</span></span><br><span class="line">git revert 3处的commitId</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>(2)如果想要撤回3,2的提交(同时撤销多个提交)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">q</span><br><span class="line">git revert 3处的commitId 2处的commitId</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>[注]revert运行跨commit进行回滚的，前提的是你想要回滚的commit涉及的文件，在后面都没有被修改过</p><ul><li>revert和reset的区别</li></ul><blockquote><ol><li>revert是提交一个新的commit来回滚的, commit的内容就是和已想要回滚的那个commit相反的操作</li><li>reset 是直接删除指定的commit, 后续的commit记录是看不到的</li><li>上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会</li><li>如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里</li><li>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert<br>是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的</li></ol></blockquote><p>建议：用git revert来撤销已经提交的更改，而git reset用来撤销没有提交的更改</p><p>参考：<br><a href="https://blog.csdn.net/qq_36460164/article/details/79857431" target="_blank" rel="noopener">git push之后回滚(撤销)代码</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Git提交撤销&quot;&gt;&lt;a href=&quot;#Git提交撤销&quot; class=&quot;headerlink&quot; title=&quot;Git提交撤销&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Git提交</title>
    <link href="http://lcn29.github.io/2019/08/04/Git%E6%8F%90%E4%BA%A4/"/>
    <id>http://lcn29.github.io/2019/08/04/Git提交/</id>
    <published>2019-08-04T01:33:49.000Z</published>
    <updated>2019-08-04T06:01:18.362Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --><h1 id="Git提交"><a href="#Git提交" class="headerlink" title="Git提交"></a>Git提交</h1><h2 id="1-代码提交"><a href="#1-代码提交" class="headerlink" title="1. 代码提交"></a>1. 代码提交</h2><p>平时如果使用Github，没有按照客户端的话,或者借助开发工具(eclipse, idea等自带的插件),我们都是通过Git的控制台进行操作的，如果要提交代码的话, 我们需要依次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加当前路径和路径下面的所有修改过的文件</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'提交的备注'</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>我们可以通配置github免密提交，然后把上面的三个命令封装为一个shell脚本(也可以封装成window的cmd，可俺不会)，后续直接执行一次这个脚本,就能提交修改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . &amp;&amp; git commit -m <span class="variable">$1</span> &amp;&amp; git push</span><br></pre></td></tr></table></figure><p>新建一个<code>push.sh</code>文件，然后把上面的内容复制到文件内,然后把文件放到你的仓库的根目录,后续修改了代码，需要提交时只有打开git的bash 输入 <code>sh push.sh &#39;提交的备注&#39;</code>就行了</p><p>缺点：每次提交都是全部内容提交，没法做出筛选(可以修改一下脚本, 增加一个参数：提交的目录文件)</p><h2 id="2-将本地已有的代码提交到一个新的仓库"><a href="#2-将本地已有的代码提交到一个新的仓库" class="headerlink" title="2. 将本地已有的代码提交到一个新的仓库"></a>2. 将本地已有的代码提交到一个新的仓库</h2><p>如果你本地已有一部分写好的代码，现在想要用Github进行版本管理等，又不想改变本地的工作空间，那么你可以</p><blockquote><ol><li>在Github上新建一个仓库，仓库名和你本地代码的工作空间的名称一样,(如，你的代码在<code>D/code/project/Test</code>, test下面就是你想要提交到Github的内容,那么你的仓库名就是Test)</li><li>然后在你代码的根目录(也就是Test里面) 执行 <code>git init</code></li><li><code>git remote add origin 你的仓库地址</code> 把你本地和远程的git仓库绑定</li><li><code>git pull</code> 拉取远程仓库的内容</li><li><code>git add .</code> 把本地代码提交到git的缓存区 (如果有文件不想要提交的，提前建立好<code>.gitignore</code>文件进行过滤)</li><li><code>git commit -m &#39;提交备注&#39;</code></li><li><code>git push -u origin 你想要提交到的分支(master)</code> 提交到远程仓库</li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Git提交&quot;&gt;&lt;a href=&quot;#Git提交&quot; class=&quot;headerlink&quot; title=&quot;Git提交&quot;&gt;&lt;/a&gt;Git提交&lt;
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHubPages介绍</title>
    <link href="http://lcn29.github.io/2019/08/01/GitHubPages%E4%BB%8B%E7%BB%8D/"/>
    <id>http://lcn29.github.io/2019/08/01/GitHubPages介绍/</id>
    <published>2019-08-01T12:00:32.000Z</published>
    <updated>2019-08-01T15:40:35.902Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --><h1 id="GitHub-Pages介绍"><a href="#GitHub-Pages介绍" class="headerlink" title="GitHub Pages介绍"></a>GitHub Pages介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Websites <span class="keyword">for</span> you and your projects.</span><br><span class="line">Hosted directly from your GitHub repository. Just edit, push, and your changes are live.</span><br></pre></td></tr></table></figure><p>我的理解：</p><ul><li>一个依托于Github仓库的展示你或者你的项目的静态网站。</li><li>当你的网站做了修改，只有将其托送到对应的Github仓库,那么你的修改就能立即生效。</li></ul><h2 id="2-展示你"><a href="#2-展示你" class="headerlink" title="2. 展示你"></a>2. 展示你</h2><p>基于GitHub Pages建立一个属于你自己的网站的步骤:</p><p>(1)第一步建立一个仓库<br>在Github上建立一个仓库，这个仓库和平时你存项目的仓库没有什么区别，唯一的要求就是仓库的名字的格式： <code>{你的Github用户名}.github.io</code> 这个格式是保证后续能够访问到你的仓库内容要求</p><p>(2)在你的仓库里面新建一个index.html页面(index.html就是你的网站的入口)</p><pre><code class="html"><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Examples<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello GitHub Pages !<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></code></pre><p>通过上面2步上面，一个展示你的网站就完成了。这是你通过浏览器访问<code>https://{你的Github用户名}.github.io</code>你将看到你index里面的内容了: Hello GitHub Pages。</p><p>后续你只要修改index.html页面或者添加新的页面，在提交到你的仓库，那么对应的页面就会修改。所以你完全可以通过GitPage做一个你想要的网站</p><p>[注] 如果你拥有一个组织，也想建立一个展示你组织的网站,方式和上面类似，只是<code>{你的Github用户名}</code>修改为<code>{你的组织的名}</code></p><h2 id="3-展示你项目"><a href="#3-展示你项目" class="headerlink" title="3. 展示你项目"></a>3. 展示你项目</h2><p>假设你把你的一个项目托管到了github,并将其开源了。那么为了让别人能开心的使用你的开源项目，当前需要有对应的说明文档吧。这是你会?</p><blockquote><ol><li>直接写在readme</li><li>开一个wiki</li></ol></blockquote><p>这2种方式都可以。 现在你可以多一种方式了：为你的项目建一个GitHub Pages,通过网页的形式进行介绍</p><ul><li>第一步在你的开源项目下新建一个分支 (分支名：gh-pages)</li><li>在你的分支里面放入你想要展示的页面(如果你的项目的master里面原本是有内容的，切的分支里面也会有对应的内容,因为这条分支后续是不会合并内容到主干的，所以可考虑把这些内容删除,方便后续的管理)</li></ul><p>这时你就可以通过 <code>https://{你的用户名}.github.io/{你的项目仓库名(大小写要一致)}</code>访问到你的项目了GitHub Pages了</p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><p>GitHub Pages 网站是在网络上公开使用的，即使他们的库是私有的。如果你敏感的数据在你的Page库中，你可能需要在发布之前删除它</p><h2 id="5-使用限制"><a href="#5-使用限制" class="headerlink" title="5. 使用限制"></a>5. 使用限制</h2><blockquote><ol><li>GitHub Pages源库建议限制在1GB内</li><li>发布的GitHub Pages网站体积最大不能超过1GB,(还有每个月限制100000的访问量,但是从<a href="https://help.github.com/en/articles/what-is-github-pages" target="_blank" rel="noopener">官网</a>来看的话，这个限制应该是没有了)</li><li>GitHub Page网站带宽限制是100Gb</li><li>GitHub Pages页面网站每小时最多有10次构建</li></ol></blockquote><p>如果你超过了这些使用配额，Github官方将不会提供给你的网站提供服务，或者你可能会受到一个有礼貌的邮件，它是来自GitHub Support的建议策略，目的是降低你的网站对GitHub服务器的影响。建议其中包括迁移到一个不同的主机服务以便更加满足你的需求。</p><h2 id="6-禁止事项"><a href="#6-禁止事项" class="headerlink" title="6.禁止事项"></a>6.禁止事项</h2><blockquote><ol><li>GitHub的服务条款禁止的或非法的内容或活动</li><li>暴力或威胁性的内容或活动</li><li>过多的自动化批量活动(例如，垃圾邮件)</li><li>危害github用户或github服务的活动</li><li>快速致富计划,也就是赌博等活动</li><li>色情内容</li><li>歪曲你的身份或网站目的的内容</li></ol></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Aug 08 2019 09:41:44 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;GitHub-Pages介绍&quot;&gt;&lt;a href=&quot;#GitHub-Pages介绍&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Git" scheme="http://lcn29.github.io/categories/Git/"/>
    
      <category term="GitHub" scheme="http://lcn29.github.io/categories/Git/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://lcn29.github.io/tags/GitHub/"/>
    
  </entry>
  
</feed>
